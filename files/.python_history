import nimpu
import numpy
exit()
import binfcode
exti()
exit()
s1 = 'abc'
s1.remove('a')
help(s1)
help(set)
help(s1)
help('s1')
help(str)
exit()
import sys
sys.path()
a = sys.path()
a = [1,2,3]
print(a)
import Bio
exit()
import Bio
from Bio import SeqIO
exit()
import Bio
from Bio import SeqIO
exit()
import sys
print(sys.path)
exit()
print(sys.path)
import sys
print(sys.path)
exit()
import argparse
args = argparse.Namespace()
args.foo = 1
args.bar = [1,2,3]
vars(args)
d = vars(args)
d
d.key
d.keys
d.keys()
type(d)
d['janusz'] = 'jest super'
args.janusz
vars(args)
args.keys
vars(args).keys
type(vars(args))
type(vars(args).keys)
type(vars(args).keys())
d.keys
d.keys()
vars(args).keys()
args.janusz
exit()
import subprocess
print(dir(subprocess))
print(dir(subprocess.Popen))
print(subprocess.doc)
print(subprocess.__doc__)
import subprocess as sub
sub.Popen('which python')
sub.Popen('which')
python 
sub.Popen('which', 'python')
sub.Popen('which', ' python')
sub.Popen('ls', 'l')
sub.run('which')
sub.run('which python')
sub.run('which')
sub.run('which', 'python')
sub.run('which')
sub.run('ls')
sub.run('ls', '-l')
sub.run(['ls', '-l'])
sub.run(['which', 'python'])
sub.run(['which', 'python'], capture_output=True)
a = sub.run(['which', 'python'], capture_output=True)
print(a)
a.stdout
type(a.stdout)
b = a.stdout
b
b.split('/')
b.split()
type(b.split())
a = b.split()
a
type(a)
type(a[0])
str = /usr/local/bin/pip3 show pip
str = '/usr/local/bin/pip3 show pip'
args = str.split()
args
p = sub.Popen(args)
sub.Popen(args)
exit()
a = [a,b,c]
a = [12,3,]
a
a[=2]
a[-2]
help(filter())
help(filter)
a = lambda x: x> 0, [-2, -1, 0, 1, 2]
list(a)
[a]
a
a = filter(a)
map(lambda x: x>0, [])
a = [-2, -1, 0, 1, 2]
map(lambda x: x>0, [a])
b = map(lambda x: x>0, [a])
b
print(f'{list(b)}')
b = map(lambda x: x>0, a)
print(f'{list(b)}')
help(map)
b = list(map(lambda x: x>0, a))
print(f'{list(b)}')
print(f'{b}')
b = list(filter(lambda x: x>0, a))
print(b)
range(5)
print(range(5))
for i in range(5):
	print(i)
for i in range(2,5):
	print(i)
help(any)
print i in range(2, -1):
for i in range(2, -1):
	print(i)
help(add)
a = [1,2,3]
a.inedx(1)
a.index(1)
a = range(2)
list(a)
list[range(2)]
list(range(2))
words_list = ['mama', 'tata', 'baba', 'dada']
words_list.join(' ')
dir(list)
150*4
exit()
import numpy as np
np.array([[1,2,7], [7,7,1]])
import numpy
import datetime
import numpy
exit()
import numpy
import numpy as np
a =np.array([[1,2,7], [7,7,1]])
b =np.array([[6,5,5], [0,6,1]])
print(a-b)
np.array([10, 15, 22, 13, 17, 20, 8])
a =np.array([10, 15, 22, 13, 17, 20, 8])
a = x[x<17]
small = a[a<17]
small
exit()
a = 1 + 2 + 3 + 4 + \
    6 + 1
a
a = 1       +    4
a
exit()
import datetime
dir(datetime)
print(datetime.__doc__)
print(datetime.__file__)
print(datetime.__loader__)
print(datetime.__name__)
help(datetime.date)
help(datetime)
datetime.date()
datetime.date('1020')
datetime.date(1020)
help(datetime.date())
help(datetime.date)
datetime.date(1020, 10,12)
help(datetime.date)
datetime.date.isocalendar()
datetime.date.isocalendar(1200, 1, 12)
help(datetime.date)
datetime.today()
datetime.today
date.today
datetime.today()
help(datetime.date)
today()
datime.today()
help(datetime.date)
date.today
date.today()
import date
exit()
import datetime
import date
datetime.date.today()
3000-850-300
1850-400
exit()
which
exit()
import biopython
exit()
dir(str)
help(str)
import string
string.alphanumeric()
help(string)
string.alpha
help(string)
string.digits
dir(str)
b = [a,b,c,d]
b = [1,2,3,4]
b
''.join(b)
a
b
''.join(b)
b =['1', '2'] 
''.join(b)
exit()
help(str)
a = 'AAAABIASBFDIASBbbiasbfisauhdf'
a.lowercase(
)
a.lowercase()
a.lower()
help(filter)
help(any)
a = []
any(a)
a = [1,2,3]
any(a)
a = [None]
any(a)
a = [0]
any(a)
a = [0,12]
any(a)
a = [1,2,3,4]
sum(a)
sum(a[::-2])
a[::-2]
a[:+2:]
a[:-2:]
a[-2::]
map(lambda n: n**2, range(0,3))
list(map(lambda n: n**2, range(0,3)))
list(map(lambda n: n**2, range(0,4)))
list(map(lambda n: n**2, range(0,10)))
any(map(lambda n: n**2, range(0,10)))
b = []
any(map(lambda n: b.append(n**2), range(0,10)))
b
(map(lambda n: b.append(n**2), range(0,10)))
b
b=[]
(map(lambda n: b.append(n**2), range(0,10)))
b
list((map(lambda n: b.append(n**2), range(0,10)))
)
b
d['a']=1
d={}
d['a']=1
d
d['a']
exit()
a=['Match': 1]
a = {'a': 2}
a.keys()
a.get('a')
a.get('b')
a.get('c')
for i in a.keys():
	print(i)
if a.get('a') != None:
	print('JEST')
else:
	print('Nie ma')
if a.get('b') != None:
	print('JEST')
else:
	print('Nie ma')
exit()
a = {'a':1}
a.keys()
a['c']=5
a
a.keys()
b = a.keys()
b
for i in b:
	print(i)
exit()
a = ['a':1, 'b':2]
a = ['a': 1, 'b': 2]
a = {'a': 1, 'b': 2}
a['a']
a['c']
l1 = [1,2,3,4]
l2=[a,b,c,d]
l2=['a','b','c','d']
l1
l2
a = (l1[1], l2[1])
a
exit()
a={'a':1}
type(a)
if typa(a) is not dict: print('sdf')
if type(a) is not dict: print('sdf')
type(dict())
type(dict)
with open('lol.txt') as f:
	f.write('Hello')
with open('lol.txt', 'w') as f:
	f.write('Hello')
with open('lol.txt', 'w') as f:
	f.write('Hehe')
exit()
with open('lol.txt') as f:
	f.write('asdasd')
with open('lol.txt', 'a') as f:
	f.write('aaa')
with open('lol.txt', 'a') as f:
	f.write('aaa')
exit()
help(writer())
help(write())
help(write)
with open('lol.txt', 'a') as f:
	f.write('lola')
help(f.write)
with open('lol.txt', 'a') as f:
	f.writer('lola')
exit()
a = [1,4,2,3,4,56,6]
a.srot()
a.sort()
a
exit()
a = []
if a: print('jhdjsdbf')
exit()
l = ['asdasd']
b = copy(l)
b = l.copy()
id(b)
id(l)
exit()
d = {'a': 1}
b = a.copy()
b = d.copy()
id(b)
id(b) == id(d)
d
b
exit()
d = {'a': 1}
b = d.copy()
d == b
exit()
d = {'a': 1}
b = d.copy()
d['aa'] = 2
d
d == b
exit()
d['aa'] = 2
d = {'a': 1}
d.__setitem__('aaaaa', 'awefawf')
d
dexit()
exit()
a = ['1':2, '2sdfsdf': 'asdfsadf']
a = ['1': 2, '2sdfsdf': 'asdfsadf']
a = {'1': 2, '2sdfsdf': 'asdfsadf'}
a
b = {one for one in a for two in g}
b
g = {'1', 'asdfasdfsadf', 'sdfasdgwegws'}
[one for one in b]
exit()
a = [(2, 'a'), (1, 'b')]
a.sort()
a
a = ()
dir(a)
dir(a.__add__)
help(a.__add__)
a = {'a': 1}
a['b']
help([].sort)
[[('KL58'), (58, 425) , [('AAAA', 'AA'), ('BBBB', ('BB'))]]]
l1 =[[('KL58'), (58, 425) , [('AAAA', 'AA'), ('BBBB', ('BB'))]]]
l2 =[[('KL52'), (1, 2) , [('AAAA', 'AA'), ('BBBB', ('BB'))]]]
l3 = [l1, l2]
l3
l3.sort()
l3
d1 = [[['KL58', (58, 425), [('AAAA', 'AA'), ('BBBB', 'BB')]]], [['KL52', (1, 2), [('AAAA', 'AA'), ('BBBB', 'BB')]]]]
('a', 'b').join()
['a', 'b'].join()
''.join(('a', 'b'))
'asdasd'
tuple('asdasd')
('asdasd')
type(('asdasd'))
help(tuple())
a = [(2, 'a'), (2, 'b'), (1, 'c'), (3)]
a = [(2, 'a'), (2, 'b'), (1, 'c'), (1, 'a'), (13, 'z')]
a = [(2, 'a', 'asdfgsadf'), (2, 'b', 'ddddd'), (1, 'c', 'aaaaaa'), (1, 'a', 'sdaffadafsd'), (13, 'z', 'ccccccccc')]
a.sort(key=lambda item: item[1] and item[0])
a
l1 = ['mama', 'tata', 'dziecko', 'yolo']
l2 = ['tata', 'mama', 'yolo', 'dziecko', 'ojciec]'
l2 = ['tata', 'mama', 'yolo', 'dziecko', 'ojciec']
l1
l2
t2 = ('tata', 'mama', 'yolo', 'dziecko', 'ojciec')
l1
t2
a['a']=1
a = {}
a[1]='a'
a
a[a[1]]='b'
a
a={}
a[1]={}
a
a[1]
a[1]['ggdf']='sdfsd'
a
{}
dir({})
dir({}.uptade)
dir({}.uptade())
dir(uptade({}))
dir(str)
'sdafasd  sadfasdf'.split()
dir({}.update())
dir({}.update()__doc__)
dir({}.update().__doc__)
dir({}.update().__doc__())
help({}.update())
help({}.update)
a = {1: {}}
x = {1:2}
x.update(a)
x
a
x
x = {1:2}
d = {3:4, 5:6}
x.update(d)
d
x
a = {1: {}}
x = {1:2}
a.update(x)
a
a = {1: {}}
x = {12:2}
a.update(x)
a
a = {1: {}}
x = {12:2}
a[1].update(x)
a
exit()
from pathlib import Path
dir(Path)
Path(cwd)
help(Path)
Path(cwd) / 'output'
Path.cwd / 'output'
Path.cwd() / 'output'
home_dir = Path.home()
home_dir
Path.glob('*')
Path.glob('A*')
Path.glob(*)
Path.glob('output')
Path.glob('*')
Path.cwd().glob('*')
a = Path.cwd().glob('*')
for e in a:
	print(e)
for e in a:
	if e == home_dir + '/' + output: Path.remove(f'{home_dir}/output')
a = Path.cwd().glob('*')
for e in a:
	print(e)
Path.cwd() / 'output'
Path.cwd('output')
home_dir = Path.cwd('output')
home_dir = Path.cwd()
print(home_dir)
cwd = Path.cwd()
print(cwd)
Path.cwd()
p = Path.cwd()
print(p)
p.Path.glob('*')
p = Path('.')
p
p = Path('/Users/')
p
p = Path('/Users/januszkoszucki')
p
p = Path.cwd()
p
Path('.').glob('*')
p = Path('a')
p
p = Path('/Users/')
p.glob('*')
Path.cwd()
Path.cwd().glob('*')
p = Path.cwd()
Path.cwd().glob('*')
Path.home()
Path.home().as_posix()
Path.cwd().glob("*")
a = Path.cwd().glob("*")
for e in a:
	print(a)
for e in a:
	print(e)
a = Path.cwd().glob("*")
for e in a:
	print(e)
import pathlib
Path.cwd()
from pathlib import Path
Path.cwd()
Path.cwd().resolve()
type(Path.cwd().resolve())
type(Path.cwd())
type(Path.cwd().as_posix())
Path.cwd().as_posix()
dir(Path)
help(Path.mkdir)
Path.mkdir('t')
Path.mkdir() / 'as'
exit()
import os
os.listdir()
exit()
import os
os.listdir()
if "Music" in os.listdir(): print('Musik in listdir')
if "Music" not in os.listdir(): print('Music in listdir')
exit()
form pathlib import Path
from pathlib import Path
path.cwd()
Path.cwd()
path = Path.cwd()
path
path = Path.cwd() / 'new'
path
path.mkdir()
exit()
from pathlib import Path
dir(Path)
Path.group()
Path.home()
Path.home() / 'new'
a = Path.home() / 'new'
a.parents()
a.name()
a.parent()
a.resolve()
a.root()
root(a)
a = Path.home() / 'new'
a.root()
root(a)
Path.root(a)
Path.root()
dir(Path)
help(Path)
Path.name(/Users/mama.txt)
Path.name('/Users/mama.txt')
a = Path('/Users/januszkoszucki/txt.txt')
a
a.name
a.parent
exit()
from pathlib import Path
a = Path('/User/januszkoszucki/txt.txt')
a.name
a.parent
b = a.parent
type(b)
type(b.resolve())
exit()
from pathlib import Path]
from pathlib import Path
a = Path('/User/januszkoszucki/')
a.name
a = Path('/User/januszkoszucki/txt.txt')
a.name
a.parent
if a.exist(): print('Istnieje')
if a.exists(): print('Istnieje')
a = Path('/User/januszkoszucki/')
if a.exists(): print('Istnieje')
a = Path('/User/januszkoszucki/')
if a.exists(): print('Istnieje')
if a: print("Istnieje")
a = Path(None}
a = Path(None)
if None: print('kjasdf')
exit()
from pathlib import Path
a = Path('/Users/januszkoszucki/')
a
exit()
import pathlib
help(pathlib.Path.rmdir())
help(pathlib.Path.rmdir)
exit()
from pathlib import Path
path('/Users/lol')
Path('/Users/lol')
Path('/Users/lol').exists()
path = '/Users/'
Path(path)
Path(path).exists()
Path(None).exists()
exit()
Path(json_path).name().as_posix()
from pathlib import Path
Path(json_path).name().as_posix()
json_path = '/Users/januszkoszucki/'
Path(json_path).name().as_posix()
Path(json_path)
a = Path(json_path)
a.name()
name(a)
a.parent()
a.name
exit
exit()
