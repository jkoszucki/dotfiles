import nimpu
import numpy
exit()
import binfcode
exti()
exit()
s1 = 'abc'
s1.remove('a')
help(s1)
help(set)
help(s1)
help('s1')
help(str)
exit()
import sys
sys.path()
a = sys.path()
a = [1,2,3]
print(a)
import Bio
exit()
import Bio
from Bio import SeqIO
exit()
import Bio
from Bio import SeqIO
exit()
import sys
print(sys.path)
exit()
print(sys.path)
import sys
print(sys.path)
exit()
import argparse
args = argparse.Namespace()
args.foo = 1
args.bar = [1,2,3]
vars(args)
d = vars(args)
d
d.key
d.keys
d.keys()
type(d)
d['janusz'] = 'jest super'
args.janusz
vars(args)
args.keys
vars(args).keys
type(vars(args))
type(vars(args).keys)
type(vars(args).keys())
d.keys
d.keys()
vars(args).keys()
args.janusz
exit()
import subprocess
print(dir(subprocess))
print(dir(subprocess.Popen))
print(subprocess.doc)
print(subprocess.__doc__)
import subprocess as sub
sub.Popen('which python')
sub.Popen('which')
python 
sub.Popen('which', 'python')
sub.Popen('which', ' python')
sub.Popen('ls', 'l')
sub.run('which')
sub.run('which python')
sub.run('which')
sub.run('which', 'python')
sub.run('which')
sub.run('ls')
sub.run('ls', '-l')
sub.run(['ls', '-l'])
sub.run(['which', 'python'])
sub.run(['which', 'python'], capture_output=True)
a = sub.run(['which', 'python'], capture_output=True)
print(a)
a.stdout
type(a.stdout)
b = a.stdout
b
b.split('/')
b.split()
type(b.split())
a = b.split()
a
type(a)
type(a[0])
str = /usr/local/bin/pip3 show pip
str = '/usr/local/bin/pip3 show pip'
args = str.split()
args
p = sub.Popen(args)
sub.Popen(args)
exit()
a = [a,b,c]
a = [12,3,]
a
a[=2]
a[-2]
help(filter())
help(filter)
a = lambda x: x> 0, [-2, -1, 0, 1, 2]
list(a)
[a]
a
a = filter(a)
map(lambda x: x>0, [])
a = [-2, -1, 0, 1, 2]
map(lambda x: x>0, [a])
b = map(lambda x: x>0, [a])
b
print(f'{list(b)}')
b = map(lambda x: x>0, a)
print(f'{list(b)}')
help(map)
b = list(map(lambda x: x>0, a))
print(f'{list(b)}')
print(f'{b}')
b = list(filter(lambda x: x>0, a))
print(b)
range(5)
print(range(5))
for i in range(5):
	print(i)
for i in range(2,5):
	print(i)
help(any)
print i in range(2, -1):
for i in range(2, -1):
	print(i)
help(add)
a = [1,2,3]
a.inedx(1)
a.index(1)
a = range(2)
list(a)
list[range(2)]
list(range(2))
words_list = ['mama', 'tata', 'baba', 'dada']
words_list.join(' ')
dir(list)
150*4
exit()
import numpy as np
np.array([[1,2,7], [7,7,1]])
import numpy
import datetime
import numpy
exit()
import numpy
import numpy as np
a =np.array([[1,2,7], [7,7,1]])
b =np.array([[6,5,5], [0,6,1]])
print(a-b)
np.array([10, 15, 22, 13, 17, 20, 8])
a =np.array([10, 15, 22, 13, 17, 20, 8])
a = x[x<17]
small = a[a<17]
small
exit()
a = 1 + 2 + 3 + 4 + \
    6 + 1
a
a = 1       +    4
a
exit()
import datetime
dir(datetime)
print(datetime.__doc__)
print(datetime.__file__)
print(datetime.__loader__)
print(datetime.__name__)
help(datetime.date)
help(datetime)
datetime.date()
datetime.date('1020')
datetime.date(1020)
help(datetime.date())
help(datetime.date)
datetime.date(1020, 10,12)
help(datetime.date)
datetime.date.isocalendar()
datetime.date.isocalendar(1200, 1, 12)
help(datetime.date)
datetime.today()
datetime.today
date.today
datetime.today()
help(datetime.date)
today()
datime.today()
help(datetime.date)
date.today
date.today()
import date
exit()
import datetime
import date
datetime.date.today()
3000-850-300
1850-400
exit()
which
exit()
import biopython
exit()
dir(str)
help(str)
import string
string.alphanumeric()
help(string)
string.alpha
help(string)
string.digits
dir(str)
b = [a,b,c,d]
b = [1,2,3,4]
b
''.join(b)
a
b
''.join(b)
b =['1', '2'] 
''.join(b)
exit()
help(str)
a = 'AAAABIASBFDIASBbbiasbfisauhdf'
a.lowercase(
)
a.lowercase()
a.lower()
help(filter)
help(any)
a = []
any(a)
a = [1,2,3]
any(a)
a = [None]
any(a)
a = [0]
any(a)
a = [0,12]
any(a)
a = [1,2,3,4]
sum(a)
sum(a[::-2])
a[::-2]
a[:+2:]
a[:-2:]
a[-2::]
map(lambda n: n**2, range(0,3))
list(map(lambda n: n**2, range(0,3)))
list(map(lambda n: n**2, range(0,4)))
list(map(lambda n: n**2, range(0,10)))
any(map(lambda n: n**2, range(0,10)))
b = []
any(map(lambda n: b.append(n**2), range(0,10)))
b
(map(lambda n: b.append(n**2), range(0,10)))
b
b=[]
(map(lambda n: b.append(n**2), range(0,10)))
b
list((map(lambda n: b.append(n**2), range(0,10)))
)
b
d['a']=1
d={}
d['a']=1
d
d['a']
exit()
a=['Match': 1]
a = {'a': 2}
a.keys()
a.get('a')
a.get('b')
a.get('c')
for i in a.keys():
	print(i)
if a.get('a') != None:
	print('JEST')
else:
	print('Nie ma')
if a.get('b') != None:
	print('JEST')
else:
	print('Nie ma')
exit()
a = {'a':1}
a.keys()
a['c']=5
a
a.keys()
b = a.keys()
b
for i in b:
	print(i)
exit()
a = ['a':1, 'b':2]
a = ['a': 1, 'b': 2]
a = {'a': 1, 'b': 2}
a['a']
a['c']
l1 = [1,2,3,4]
l2=[a,b,c,d]
l2=['a','b','c','d']
l1
l2
a = (l1[1], l2[1])
a
exit()
a={'a':1}
type(a)
if typa(a) is not dict: print('sdf')
if type(a) is not dict: print('sdf')
type(dict())
type(dict)
with open('lol.txt') as f:
	f.write('Hello')
with open('lol.txt', 'w') as f:
	f.write('Hello')
with open('lol.txt', 'w') as f:
	f.write('Hehe')
exit()
with open('lol.txt') as f:
	f.write('asdasd')
with open('lol.txt', 'a') as f:
	f.write('aaa')
with open('lol.txt', 'a') as f:
	f.write('aaa')
exit()
help(writer())
help(write())
help(write)
with open('lol.txt', 'a') as f:
	f.write('lola')
help(f.write)
with open('lol.txt', 'a') as f:
	f.writer('lola')
exit()
a = [1,4,2,3,4,56,6]
a.srot()
a.sort()
a
exit()
a = []
if a: print('jhdjsdbf')
exit()
l = ['asdasd']
b = copy(l)
b = l.copy()
id(b)
id(l)
exit()
d = {'a': 1}
b = a.copy()
b = d.copy()
id(b)
id(b) == id(d)
d
b
exit()
d = {'a': 1}
b = d.copy()
d == b
exit()
d = {'a': 1}
b = d.copy()
d['aa'] = 2
d
d == b
exit()
d['aa'] = 2
d = {'a': 1}
d.__setitem__('aaaaa', 'awefawf')
d
dexit()
exit()
a = ['1':2, '2sdfsdf': 'asdfsadf']
a = ['1': 2, '2sdfsdf': 'asdfsadf']
a = {'1': 2, '2sdfsdf': 'asdfsadf'}
a
b = {one for one in a for two in g}
b
g = {'1', 'asdfasdfsadf', 'sdfasdgwegws'}
[one for one in b]
exit()
a = [(2, 'a'), (1, 'b')]
a.sort()
a
a = ()
dir(a)
dir(a.__add__)
help(a.__add__)
a = {'a': 1}
a['b']
help([].sort)
[[('KL58'), (58, 425) , [('AAAA', 'AA'), ('BBBB', ('BB'))]]]
l1 =[[('KL58'), (58, 425) , [('AAAA', 'AA'), ('BBBB', ('BB'))]]]
l2 =[[('KL52'), (1, 2) , [('AAAA', 'AA'), ('BBBB', ('BB'))]]]
l3 = [l1, l2]
l3
l3.sort()
l3
d1 = [[['KL58', (58, 425), [('AAAA', 'AA'), ('BBBB', 'BB')]]], [['KL52', (1, 2), [('AAAA', 'AA'), ('BBBB', 'BB')]]]]
('a', 'b').join()
['a', 'b'].join()
''.join(('a', 'b'))
'asdasd'
tuple('asdasd')
('asdasd')
type(('asdasd'))
help(tuple())
a = [(2, 'a'), (2, 'b'), (1, 'c'), (3)]
a = [(2, 'a'), (2, 'b'), (1, 'c'), (1, 'a'), (13, 'z')]
a = [(2, 'a', 'asdfgsadf'), (2, 'b', 'ddddd'), (1, 'c', 'aaaaaa'), (1, 'a', 'sdaffadafsd'), (13, 'z', 'ccccccccc')]
a.sort(key=lambda item: item[1] and item[0])
a
l1 = ['mama', 'tata', 'dziecko', 'yolo']
l2 = ['tata', 'mama', 'yolo', 'dziecko', 'ojciec]'
l2 = ['tata', 'mama', 'yolo', 'dziecko', 'ojciec']
l1
l2
t2 = ('tata', 'mama', 'yolo', 'dziecko', 'ojciec')
l1
t2
a['a']=1
a = {}
a[1]='a'
a
a[a[1]]='b'
a
a={}
a[1]={}
a
a[1]
a[1]['ggdf']='sdfsd'
a
{}
dir({})
dir({}.uptade)
dir({}.uptade())
dir(uptade({}))
dir(str)
'sdafasd  sadfasdf'.split()
dir({}.update())
dir({}.update()__doc__)
dir({}.update().__doc__)
dir({}.update().__doc__())
help({}.update())
help({}.update)
a = {1: {}}
x = {1:2}
x.update(a)
x
a
x
x = {1:2}
d = {3:4, 5:6}
x.update(d)
d
x
a = {1: {}}
x = {1:2}
a.update(x)
a
a = {1: {}}
x = {12:2}
a.update(x)
a
a = {1: {}}
x = {12:2}
a[1].update(x)
a
exit()
from pathlib import Path
dir(Path)
Path(cwd)
help(Path)
Path(cwd) / 'output'
Path.cwd / 'output'
Path.cwd() / 'output'
home_dir = Path.home()
home_dir
Path.glob('*')
Path.glob('A*')
Path.glob(*)
Path.glob('output')
Path.glob('*')
Path.cwd().glob('*')
a = Path.cwd().glob('*')
for e in a:
	print(e)
for e in a:
	if e == home_dir + '/' + output: Path.remove(f'{home_dir}/output')
a = Path.cwd().glob('*')
for e in a:
	print(e)
Path.cwd() / 'output'
Path.cwd('output')
home_dir = Path.cwd('output')
home_dir = Path.cwd()
print(home_dir)
cwd = Path.cwd()
print(cwd)
Path.cwd()
p = Path.cwd()
print(p)
p.Path.glob('*')
p = Path('.')
p
p = Path('/Users/')
p
p = Path('/Users/januszkoszucki')
p
p = Path.cwd()
p
Path('.').glob('*')
p = Path('a')
p
p = Path('/Users/')
p.glob('*')
Path.cwd()
Path.cwd().glob('*')
p = Path.cwd()
Path.cwd().glob('*')
Path.home()
Path.home().as_posix()
Path.cwd().glob("*")
a = Path.cwd().glob("*")
for e in a:
	print(a)
for e in a:
	print(e)
a = Path.cwd().glob("*")
for e in a:
	print(e)
import pathlib
Path.cwd()
from pathlib import Path
Path.cwd()
Path.cwd().resolve()
type(Path.cwd().resolve())
type(Path.cwd())
type(Path.cwd().as_posix())
Path.cwd().as_posix()
dir(Path)
help(Path.mkdir)
Path.mkdir('t')
Path.mkdir() / 'as'
exit()
import os
os.listdir()
exit()
import os
os.listdir()
if "Music" in os.listdir(): print('Musik in listdir')
if "Music" not in os.listdir(): print('Music in listdir')
exit()
form pathlib import Path
from pathlib import Path
path.cwd()
Path.cwd()
path = Path.cwd()
path
path = Path.cwd() / 'new'
path
path.mkdir()
exit()
from pathlib import Path
dir(Path)
Path.group()
Path.home()
Path.home() / 'new'
a = Path.home() / 'new'
a.parents()
a.name()
a.parent()
a.resolve()
a.root()
root(a)
a = Path.home() / 'new'
a.root()
root(a)
Path.root(a)
Path.root()
dir(Path)
help(Path)
Path.name(/Users/mama.txt)
Path.name('/Users/mama.txt')
a = Path('/Users/januszkoszucki/txt.txt')
a
a.name
a.parent
exit()
from pathlib import Path
a = Path('/User/januszkoszucki/txt.txt')
a.name
a.parent
b = a.parent
type(b)
type(b.resolve())
exit()
from pathlib import Path]
from pathlib import Path
a = Path('/User/januszkoszucki/')
a.name
a = Path('/User/januszkoszucki/txt.txt')
a.name
a.parent
if a.exist(): print('Istnieje')
if a.exists(): print('Istnieje')
a = Path('/User/januszkoszucki/')
if a.exists(): print('Istnieje')
a = Path('/User/januszkoszucki/')
if a.exists(): print('Istnieje')
if a: print("Istnieje")
a = Path(None}
a = Path(None)
if None: print('kjasdf')
exit()
from pathlib import Path
a = Path('/Users/januszkoszucki/')
a
exit()
import pathlib
help(pathlib.Path.rmdir())
help(pathlib.Path.rmdir)
exit()
from pathlib import Path
path('/Users/lol')
Path('/Users/lol')
Path('/Users/lol').exists()
path = '/Users/'
Path(path)
Path(path).exists()
Path(None).exists()
exit()
Path(json_path).name().as_posix()
from pathlib import Path
Path(json_path).name().as_posix()
json_path = '/Users/januszkoszucki/'
Path(json_path).name().as_posix()
Path(json_path)
a = Path(json_path)
a.name()
name(a)
a.parent()
a.name
exit
exit()
str1 = 'Good luck solving the quiz'
str1
a = str1
a
import string
string.ascii_lowercase
exit
exit()
help(sorted)
import string
lowercase()
lowercase
string.lowercase()
string.lowercase
string.ascii_lowercase
for ch in string.ascii_lowercase:
a = 0
for ch in string.ascii_lowercase:
	print((ch, ))
for ch in string.ascii_lowercase:
	a += 1
	print((ch, a))
b = "Good luck solving the quiz!"
b = "Goodlucksolvingthequiz"
for ch in string.ascii_lowercase:
c = []
for ch in string.ascii_lowercase:
a
a = 0
for ch in string.ascii_lowercase:
	a += 1
	c.append((ch, a))
c
cc
c
for ch in b:
	for t in c:
		if ch == t[0]: print(t)
exit()
a='Austria'
Belgium
Bulgaria
Croatia
Cyprus
Czech Republic
Denmark
Estonia
Finland
France
Germany
Greece
Hungary
Ireland
Italy
Latvia
Lithuania
Luxembourg
Malta
Netherlands
Poland
Portugal
Romania
Slovak Republic
Slovenia
Spain
Sweden
exit()
a = 'Austria Belgium Bulgaria Croatia Cyprus Czech Republic Denmark Estonia Finland France Germany Greece Hungary Ireland Italy Latvia Lithuania Luxembourg Malta Netherlands Poland Portugal Romania Slovak Republic Slovenia Spain Sweden United Kingdom'
exit()
5341039-5417341
exit()
2440-1340
447783-435537
exit()
5417341-5341039
exit()
a={}
a['b']=1
a
exit()
l = [[1,2], ['a','b']]
l
[item for item in l]
[item for sublist in l for item in sublits]
[item for sublist in l for item in sublist]
exit()
a = [0,0,0]
if a: print 'true'
if a: print ('true')
bool(a)
a
bool([])
a = [1,2,3,4]
a[4]
a[3]
a = [0,0,0,0,1,1,1,1,0,0,0,0]
for index, i in enumerate(a):
	print(index, i)
for index, i in enumerate(a[1:]):
	print(index, i)
for i in range(0,2):
	print(i)
a = [1,2,3,4]
b = ['a', 'b', 'c', 'd']
for e,c in a,b
for e,c in a,b:
	print(e,c)
a = [1,2,3]
for index, number in enumerate(a):
	print(index, number)
for index, number in enumerate(a[1]):
	print(index, number)
for index, number in enumerate(a[1:]):
	print(index, number)
exit()
a = range(0,50)
for i in a:
	print(a)
	a = range(0,10)
range(0,10)
a = list(range(0,50))
a
for i in a:
	print(a)
	a = range(0,10)
for i in a:
	print(i)
	a = range(0,10)
for index, i in enumarate(a):
	print(index, i)
	a = range(0,10)
for index, i in enumerate(a):
	print(index, i)
	a = range(0,10)
for index, i in enumerate(a):
	print(index, i)
	a = range(0,10)
	a = a[3:]
a = list(rage(0,20))
a = list(range(0,20))
for index, i in enumerate(a);
for index, i in enumerate(a):
	print(index, i)
	
a = list(range(1,20))
for index, i in enumerate(a):
	print(index, i)
	a = range(0,10)
for index, i in enumerate(a):
	print(index, i)
	global(a) = list(range(5,10))
for index, i in enumerate(a):
	print(index, i)
	global a = list(range(5,10))
for index, i in enumerate(a):
	print(index, i)
	global a
	a = list(range(0,30))
exit
exit()
with open('lol.txt', 'w+') as f:
	f.writelines('aaaaaaaa')
	f.writelines('vvvvv')
exit()
a = [('aaa', 'bbb'), ('ccc', 'ddd')]
a
'\n'.join(a)
a = [['aaa', 'bbb'], ['ccc', 'ddd']]
'\n'.join(a)
b = [string for element in a for string in element]
b
('aaa', 'bbb')
e = ('aaa', 'bbb')
''.join(e)
for i in enumerate(e):
for index, i in enumerate(e):
	print(index, i)
\
for index, i in enumerate(e):
	print(type(index), i)
for index, i in enumerate(e):
a = enumerate(e)
a
''.join(enumerate)
a = list(enumerate(e))
a
''join(a)
''.join(a)
e = ['lalala', 'babababa']
''.join(e)
enumerate(e)
exit()
''.join('a', 'b')
''.join(['a', 'b]')
''.join(['a', 'b'])
exit()
a = [1,2,3,4,5,6]
a[-1]
a[-2]
for element in a:
	print(element)
for element in a[:-2]:
	print(element)
for element in a[:-1]:
	print(element)
exit()
a = ['Ala ma kota']
a = 'Ala ma kota'
a[0:4]
exit()
a = [1,2,3,4,1,1,1,4,4,4,45,6,6,]
a
a[1]
dir(a)
a.count(1)
a.count(45)
a.count(4)
exit()
a = list(range(0,110))
a
a[0:100]
exit()
a = [1,2,3,4]
a
set(a)
a
exit()
from pathlib import Path
Path.mkdir('/Users/januszkoszucki/trololol')
Path('/Users/januszkoszucki/trololo').mkdir
p = Path('/Users/januszkoszucki/HERE')
p.exists()
p.mkdir
p.mkdir()
PurePath('/Users', 'januszkoszucki')
from pathlib import PurePath
PurePath('/Users', 'januszkoszucki')
PurePath('/Users', 'januszkoszucki', 'HERE')
output_path = PurePath('/Users', 'januszkoszucki', 'HERE')
Path(output_path)
Path(output_path).mkdir
Path(output_path).mkdir()
Path(PurePath('/Users', 'januszkoszucki', 'HERE')).mkdir()
ll
a='aaa'
a[0]='b'
dir(a)
exit()
a=1
b=1
if a or b:
	print('here')
if not a or b:
	print('here')
if not a or not b:
	print('here')
exit()
a = {}
a['key'] = 1
a.key
a['key']
a['lol'] = 2
b['gsegseg'] =6
b['gsegseg'] = 6
b={}
b['gsegseg'] = 6
b['gsegsasdasdeg'] = 8
b
a['1'] = exit()
import subprocess
bashCommand='ls'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
output
bashCommand='conda activate rafal-env'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
output
bashCommand='conda info'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
output
bashCommand='conda init;conda activate rafal-env'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
bashCommand='conda init'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
output
bashCommand='conda init'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
output
bashCommand='conda activate rafal-env'
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
exit90()
exit()
import Bios.Seq import Seq
from Bio.Seq import Seq
dir(Seq)
type(Seq_
type(Seq)
import numpy as np
type(np)
from Bio import SeqIO
for seq_record in SeqIO.parse("/Users/januszkoszucki/Data/PhageDetectionAnalysis/przemek/genomes/INF078.gb", 'genbank'):
	print(seq_record.id)
for seq_record in SeqIO.parse("/Users/januszkoszucki/Data/PhageDetectionAnalysis/przemek/genomes/INF078.gb", 'genbank'):
	print(repr(seq_record.seq))
for seq_record in SeqIO.parse("/Users/januszkoszucki/Data/PhageDetectionAnalysis/przemek/genomes/INF078.gb", 'genbank'):
	print(len(seq_record))
for seq_record in SeqIO.parse("/Users/januszkoszucki/Data/PhageDetectionAnalysis/przemek/genomes/INF078.gb", 'genbank'):
	type(seq_record)
records = list(SeqIO.parse("/Users/januszkoszucki/Data/PhageDetectionAnalysis/przemek/genomes/INF078.gb", 'genbank'))
type(records0
type(records)
type(records[0])
len(records)
len(records[0].id)
records[0].id
records[0].
repr(records[0].seq)
for i in records:
	print(i)
records
type(records)
type(records[0])
type(records[0][0])
type(records[0].dbxrefs)
type(records[0].description)
records[0].description
records[0].name
records[0].Assembly
records[0][1]
records[0]
records[0].id
for i in records[0]:
	print(i)
for i in records[0]:
	print(i)
type(records[0])
type(records)
type(records[0][0])
records[0][0]
records[0][1]
records[1]
records[0]
records[0][2]
records[0][10]
records[0].id
for i in records:
	print(i)
\
records
records[0]
records.annotations
records[0].annotations
type(records[0].annotations)
type(records[0].annotations.keys)
records[0].annotations.keys
records[0].annotations.keys()
records[0].annotations.values()
records[0].annotations.['source']
records[0].annotations['source']
records[0].annotations['orgainsm']
records[0].annotations['organism']
records[0].annotations['strain']
d = {}
d['a'] = 2
d
records[0].annotations.keys() 
record = records[0]
record
type(record)
from Bio import SeqFeature
from Bio import Seq
example_parent = Seq('AAAAGCGCAGCGAGCATCAGACGGCATCTTTT')
from Bio.Seq import Seq
example_parent = Seq('AAAAGCGCAGCGAGCATCAGACGGCATCTTTT')
from Bio.SeqFeature import SeqFeature, FeatureLocation
example_parent
type(example_parent)
example_feature = SeqFeature(FeatureLocation(1,4), type='gene')
exampl_feature
example_feature
example_parent
example_feature
exit()
from Bio.Seq import Seq
my_seq = Seq("ACTACTATCTACTATCTTTCCTTAC")
from Bio.SeqRecord import SeqRecord
my_seq_record = SeqRecord(my_seq)
type(my_seq)
type(my_seq_record)
from Bio.Alphabet import generic_dna
generic_dna
type(generic_dna)
my_seq_record
my_seq_record.seq
my_seq_record.seq.alphabet
my_seq_record.seq.alphabet = generic_dna
my_seq_record.seq.alphabet
print(my_sequence_record.format("gb"))
print(my_seq_record.format("gb"))
from Bio import SeqIO
SeqIO.write(my_seq_record, 'my_seq.gb', 'gb')
my_start_pos = SeqFeature.ExactPosition(2)
from Bio import SeqFeature
my_start_pos = SeqFeature.ExactPosition(2)
my_end_pos = SeqFeature.ExactPosition(6)
from Bio.SeqFeature import FeatureLocation
my_feature_location = FeatureLocation(my_start_pos,my_end_pos)
my_feature_type = "CDS"
from Bio.SeqFeature import SeqFeature
my_feature = SeqFeature(my_feature_location,type=my_feature_type)
my_seq_record.features.append(my_feature)
print(my_seq_record.format('gb')
print(my_seq_record.format('gb'))
my_feature = SeqFeature(my_feature_location,type='misc')
my_seq_record.features.append(my_feature)
print(my_seq_record.format('gb'))
a = '10   20'
a.strip()
a.split()
a.split()[0]
a = '10   20\n'
a.strip().split()[0]
a.strip().split()[1]
Seq('AAAAaCTCTC')
a = Seq('AAAAaCTCTC')
type(a)
SeqRecords(a)
SeqRecord(a)
type(SeqRecord(a))
a = [(1,4), (3,3),(2,2)]
a.sort()
a
a.sort(key=lambda x:x[0])
a
a.append(2,3)
a.append((2,3))
a
a.append((3,1))
a.sort(key=lambda x:x[0])
a
exit()
